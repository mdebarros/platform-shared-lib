# CircleCI v2.1 Config
version: 2.1

##
# orbs
#
# Orbs used in this pipeline
###
orbs:
  anchore: anchore/anchore-engine@1.6.6
  deploy-kube: mojaloop/deployment@0.1.6
  slack: circleci/slack@3.4.2
  pr-tools: mojaloop/pr-tools@0.1.10
  github-release: h-matsuo/github-release@0.1.3

##
# defaults
#
# YAML defaults templates, in alphabetical order
##
defaults_Dependencies: &defaults_Dependencies |
  apk --no-cache add git
  apk --no-cache add ca-certificates
  apk --no-cache add curl
  apk --no-cache add openssh-client
  apk --no-cache add bash
  apk add --no-cache -t build-dependencies make gcc g++ python3 libtool autoconf automake
  corepack enable
  npm config set unsafe-perm true
  npm install -g node-gyp
  yarn set version stable

defaults_awsCliDependencies: &defaults_awsCliDependencies |
  apk upgrade --no-cache
  apk --no-cache add \
          python3 \
          py3-pip \
          groff \
          less \
          mailcap
  pip3 install --upgrade pip awscli==1.14.5 s3cmd==2.0.1 python-magic

defaults_license_scanner: &defaults_license_scanner
  name: Install and set up license-scanner
  command: |
    git clone https://github.com/mojaloop/license-scanner /tmp/license-scanner
    cd /tmp/license-scanner && make build default-files set-up

##
# Executors
#
# CircleCI Executors
##
executors:
  default-docker:
    working_directory: &workingDirVar /home/circleci/project
    docker:
      - image: node:16.13.0-alpine

  default-machine:
    machine:
      image: ubuntu-1604:201903-01


jobs:
  setup:
    executor: default-docker
    steps:
      - checkout
      - run:
          name: Install general dependencies
          command: *defaults_Dependencies

      # - restore_cache:
      #     keys:
      #     - dependency-cache-{{ .Environment.CIRCLE_SHA1 }}

      - run: YARN_ENABLE_IMMUTABLE_INSTALLS=false yarn install

      - save_cache:
          paths:
            - node_modules
          key: dependency-cache-{{ .Environment.CIRCLE_SHA1 }}

      - persist_to_workspace:
          root: *workingDirVar
          paths:
            - .
  test-unit:
    executor: default-docker
    steps:
      - attach_workspace:
          at: *workingDirVar
      - run:
          name: Execute unit tests
          command: yarn test:unit-report # > ./test/results/tape.xml
      # - store_artifacts:
      #     path: ./test/results
      #     prefix: test
      # - store_test_results:
      #     path: ./test/results
  publish:
    executor: default-docker
    steps:
      - attach_workspace:
          at: *workingDirVar
      - checkout
      - run:
          name: Install general dependencies
          command: *defaults_Dependencies
      - run:
          name: Authenticate with registry
          command: echo "//registry.npmjs.org/:_authToken=$npm_TOKEN" > .npmrc
      - run:
          name: Publish package
          command: yarn publish

  release:
    executor: default-docker
    steps:
      - run:
          name: Install general dependencies
          command: *defaults_Dependencies
      - checkout
      - restore_cache:
          keys:
          - dependency-cache-{{ .Environment.CIRCLE_SHA1 }}
      - run:
          name: Configure git
          command: |
            git config user.email ${GIT_CI_EMAIL}
            git config user.name ${GIT_CI_USER}
            git checkout ${CIRCLE_BRANCH}
      - run:
          name: Configure ssh
          command: |
            mkdir -p ~/.ssh
            ssh-keyscan -p 443 ssh.github.com >> ~/.ssh/known_hosts
            ssh-keyscan github.com >> ~/.ssh/known_hosts
      - run:
          name: Generate changelog and bump package version
          command: npm run release
      - run:
          name: Push the release
          command: git push --follow-tags origin ${CIRCLE_BRANCH}

  github-release:
    executor: default-machine
    steps:
      - run:
          name: Install git
          command: |
            sudo apt-get update && sudo apt-get install -y git
      - checkout
      - run:
          name: Fetch updated release branch
          command: |
            git config user.email ${GIT_CI_EMAIL}
            git config user.name ${GIT_CI_USER}
            git fetch origin
            git checkout origin/${CIRCLE_BRANCH}
      - run:
          # Note: this is rather imperfect, but will do for now
          name: Format the changelog into the github release body and get release tag
          command: |
            git diff --no-indent-heuristic master~1 HEAD CHANGELOG.md | sed -n '/^+[^+]/ s/^+//p' > /tmp/changes
            echo 'export RELEASE_CHANGES=`cat /tmp/changes`' >> $BASH_ENV
            echo 'export RELEASE_TAG=`cat package-lock.json | jq -r .version`' >> $BASH_ENV
      - run:
          name: check the release changes
          command: |
            echo "Changes are: ${RELEASE_CHANGES}"
      - github-release/create:
          github-token-variable: ${GITHUB_TOKEN}
          tag: v${RELEASE_TAG}
          title: v${RELEASE_TAG} Release
          description: ${RELEASE_CHANGES}
          file-path: CHANGELOG.md
      - slack/status:
          webhook: "$SLACK_WEBHOOK_ANNOUNCEMENT"
          success_message: '*"${CIRCLE_PROJECT_REPONAME}"* - Release \`"v${RELEASE_TAG}"\` \nhttps://github.com/mojaloop/"${CIRCLE_PROJECT_REPONAME}"/releases/tag/"v${RELEASE_TAG}"'

workflows:
  version: 2
  build:
    jobs:
      - pr-tools/pr-title-check:
          context: org-global
      - setup:
          context: org-global
          filters:
            tags:
              only: /.*/
            branches:
              ignore:
                - /feature*/
                - /bugfix*/
      - test-unit:
          context: org-global
          requires:
            - setup
          filters:
            tags:
              only: /.*/
            branches:
              ignore:
                - /feature*/
                - /bugfix*/
      # New commits to master release automatically
      - release:
          context: org-global
          requires:
            - pr-tools/pr-title-check
            - test-unit
            # - test-coverage
            # - vulnerability-check
            # - audit-licenses
            # - license-scan
            # - image-scan
          filters:
            branches:
              only:
                - master
                - /release\/v.*/
      - github-release:
          context: org-global
          requires:
            - release
          filters:
            branches:
              only:
                - master
                - /release\/v.*/
      - publish:
          context: org-global
          # requires:
            # - license-scan
            # - image-scan
          filters:
            tags:
              only: /v[0-9]+(\.[0-9]+)*\-snapshot+((\.[0-9]+)?)/
            branches:
              ignore:
                - /.*/
